name: Publish Module
on:
  push:
    branches:
      - newer
defaults:
  run:
    shell: pwsh

jobs:
  publish:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, 'update version')"

    steps:
      - uses: actions/checkout@v2

      - name: 💻 Check to see if PowerShell files have been modified
        run: |
          $env:GITHUB_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          $lastreleasedate = (gh release view --json createdAt | ConvertFrom-Json).CreatedAt
          if (-not $lastreleasedate) {
            $lastreleasedate = "2000-01-01"
          }
          $files = gh pr list --search "is:pr merged:>$lastreleasedate" --json files --limit 1000 | ConvertFrom-Json

          if ($files.files.path -notmatch "ps*1*") {
            exit 0
          }

      # time to party
      - name: 💻 Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1.1
        with:
          modules-to-cache: PSFramework, PoshRSJob, posh-ssh
      - name: 🧰 Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: 🤩 Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

      - name: 📝 Sign and publish
        env:
          NUGETAPIKEY: ${{secrets.NUGETAPIKEY}}
          SECURESTRING: ${{secrets.SECURESTRING}}
          SIGNCERT: ${{secrets.SIGNCERT}}
        run: |
          # Get manifest
          $psd1 = Get-ChildItem *.psd1
          Import-Module $psd1.FullName
          $modulename = Get-ChildItem *.psd1 | Select -ExpandProperty BaseName

          # Update version. Update-ModuleManifest reformats, use replace instead.
          $manifest = Import-PowerShellDataFile $psd1.FullName
          [version]$version = $Manifest.ModuleVersion
          [version]$newversion = "{0}.{1}.{2}" -f $Version.Major, $Version.Minor, ($Version.Build + 1)
          (Get-Content $psd1.FullName) -replace $version, $NewVersion | Set-Content $psd1.FullName -Encoding UTF8

          # Prep for gallery
          $null = New-Item -Type Directory -Path C:\gallery\$modulename
          robocopy $pwd C:\gallery\$modulename /S /XF *.psproj* *.git* *.yml /XD .git .github Tests .vscode | Out-String | Out-Null
          # robocopy gives exit codes other than 0, which breaks github actions
          if ($LASTEXITCODE -eq 1) {
            $LASTEXITCODE = 0
          }

          # Combine for faster loading for common public and private directories
          foreach ($dir in (Get-ChildItem -Path C:\gallery\$modulename -Directory |
            Where-Object Name -in "public", "private", "internal", "functions"
            )) {
              $ps1 = Get-ChildItem -Path $dir.FullName -Filter *.ps1
              $combofile = Join-Path -Path $dir.FullName -ChildPath "$($dir.Name).ps1"
              $ps1 | Get-Content | Set-Content -Path $combofile -Encoding UTF8
              $ps1 | Remove-Item -Force
          }

          # Sign (but actually don't for this module)
          if ($env:SIGNCERT -and $modulename -ne 'tentools') {
            # To get base64 from pfx to create Secret
            # [convert]::ToBase64String(([IO.File]::ReadAllBytes("C:\temp\cert.pfx")))
            $buffer = [System.Convert]::FromBase64String($env:SIGNCERT)
            $certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]::New($buffer, $env:SECURESTRING)
            Get-ChildItem C:\gallery -Recurse -Filter *.ps*1* | Set-AuthenticodeSignature -Certificate $certificate -TimestampServer http://timestamp.digicert.com
          }

          $publishparams = @{
            Path              = "C:\gallery\$modulename"
            NuGetApiKey       = $env:NUGETAPIKEY
            SkipAutomaticTags = $true
            Verbose           = $true
            Whatif            = $true
          }
          Publish-Module @publishparams

      - name: ⤴ Commit updated version
        run: |
          git config user.name github-actions
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git commit -am "update version"
          git push

      - name: 🚀 Create a release
        run: |
          # Create release notes
          $env:GITHUB_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          $lastreleasedate = (gh release view --json createdAt | ConvertFrom-Json).CreatedAt
          if (-not $lastreleasedate) {
            $lastreleasedate = "2000-01-01"
          }
          $rawnotes = gh pr list --search "is:pr merged:>$lastreleasedate" --json title,url,number,author,files --limit 1000 | ConvertFrom-Json
          $notes = @()
          foreach ($note in $rawnotes) {
            $title = $note.title
            $url = $note.url
            $notes += "[$title]($url)"
          }

          if ($rawnotes.files.path -match "ps*1*") {
            # Get module version to tag and title
            $manifest = Import-PowerShellDataFile *.psd1
            $version = $Manifest.ModuleVersion

            # If a matching git tag does not yet exist, one will automatically be created
            gh release create "v$version" --notes ($notes -join "`n") --target main --title "v$version" --draft
          }
